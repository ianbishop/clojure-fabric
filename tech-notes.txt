* gRPC stub mapping between Java and Clojure
(See https://grpc.io/docs/reference/java/generated-code.html)

There are three types of stubs: asynchronous, blocking, and future.
- Async uses StreamObserver
- Blocking only supports server-streaming, no client/bidirectional-streaming
- Future does not support streaming

Supporting Async (and/or Blocking) seem good enough.

---

* Cryptography
- PKI(Public Key Infrastructure) : CAs.
- CA(Certificate Authority) : CA provides a signed public key as a part of PKI.
- CSR(Certificate Signing Request) : format to submit to CA.
- PKCS(Public Key Cryptography Standards) : a password container format, fully encrypted.
- ASN.1(Abstract Syntax Notation One): a formal language standard, which is used to describe X509.
- X509 : a standard for public key certificate format.
- PEM(Privacy Enhanced Mail) : a container format for public cert.
  or cert chain(pub key, private key, root certificates). May encode CSR as PKCS10 format, etc.
  Usually base64 encoded x509 ASN.1 keys.
- KEY : a .key file is PEM formatted version of private key.
- DER : a canonical method to encode ASN.1 syntax in binary.
  For example, a .pem file is a base64 encoded der.


* Cryptogen(http://hyperledger-fabric.readthedocs.io/en/latest/msp.html)
Self signed certs, 'the root of trust' - a folder 'cacerts' to include PEM files each corresponding to a root CA’s certificate
Admin's certs for MSP - a folder 'admincerts' to include PEM files each corresponding to an administrator certificate
a folder 'keystore' to include a PEM file with the node’s signing key; we emphasise that currently RSA keys are not supported
a folder 'signcerts' to include a PEM file with the node’s X.509 certificate
(optional) a folder 'tlscacerts' to include PEM files each corresponding to a TLS root CA’s certificate
(optional) a folder intermediatecerts to include PEM files each corresponding to an intermediate CA’s certificate
(optional) a file config.yaml to include information on the considered OUs; the latter are defined as pairs of <Certificate, OrganizationalUnitIdentifier> entries of a yaml array called OrganizationalUnitIdentifiers, where Certificate represents the relative path to the certificate of the certificate authority (root or intermediate) that should be considered for certifying members of this organizational unit (e.g. ./cacerts/cacert.pem), and OrganizationalUnitIdentifier represents the actual string as expected to appear in X.509 certificate OU-field (e.g. “COP”)
(optional) a folder crls to include the considered CRLs
(optional) a folder tlsintermediatecerts to include PEM files each corresponding to an intermediate TLS CA’s certificate
